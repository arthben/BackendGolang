basePath: /
info:
  contact: {}
  title: Indego & Open Weather API Documentation
  version: "1.0"
paths:
  /api/v1/indego-data-fetch-and-store-it-db:
    post:
      description: "## Store data from Indego\n\nAn endpoints which downloads fresh
        data from [Indego GeoJSON station status API](https://www.rideindego.com/stations/json/)
        and stores it inside PostgreSQL.\n\n```bash\n# this endpoint will be trigger
        every hour to fetch the data and insert it in the PostgreSQL database\nPOST
        http://localhost:3000/api/v1/indego-data-fetch-and-store-it-db\n```\n\n###
        Token \nAdd HTTP header with Authorization \n```go\n\n  // example:\n\theaders
        := map[string]string{\n\t\t\"Authorization\": \"Bearer secret_token_static\",\n\t},\n```\n\n###
        Response Code\n| HTTP | Description                            |\n|------|----------------------------------------|\n|
        200  | Fetch and store to database is success |\n| 401  | Bad Authorization.
        Check token         |\n"
      parameters:
      - description: Bearer secret_token_static
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Store data from Indego
      tags:
      - API
  /api/v1/stations:
    get:
      description: "## Snapshot of all stations at a specified time\n\nData for all
        stations as of 11am Universal Coordinated Time on September 1st, 2019:\n\n```bash\nGET
        http://localhost:3000/api/v1/stations?at=2019-09-01T10:00:00Z\n```\n\nThis
        endpoint should respond as follows, with the actual time of the first snapshot
        of data on or after the requested time and the data:\n\n```javascript\n{\n
        \ at: '2019-09-01T10:00:00Z',\n  stations: { /* As per the Indego API */ },\n
        \ weather: { /* As per the Open Weather Map API response for Philadelphia
        */ }\n}\n```\n\n### Token \nAdd HTTP header with Authorization \n```go\n\n
        \ // example:\n\theaders := map[string]string{\n\t\t\"Authorization\": \"Bearer
        secret_token_static\",\n\t},\n```\n\n### Response Code\n| HTTP | Description
        \                           |\n|------|----------------------------------------|\n|
        200  | Fetch and store to database is success |\n| 401  | Bad Authorization.
        Check token         |\n| 404  | Data Not Found                         |\n"
      parameters:
      - description: Bearer secret_token_static
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'ex: 2019-09-01T10:00:00Z'
        in: query
        name: at
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Snapshot of one station at a specific time
      tags:
      - API
  /api/v1/stations/{kioskId}:
    get:
      description: "## Snapshot of one station at a specific time\n\nData for a specific
        station (by its `kioskId`) at a specific time:\n\n```bash\nGET http://localhost:3000/api/v1/stations/{kioskId}?at=2019-09-01T10:00:00Z\n```\n\nThe
        response should be the first available on or after the given time, and should
        look like:\n\n```javascript\n{\n  at: '2019-09-01T10:00:00',\n  station: {
        /* Data just for this one station as per the Indego API */ },\n  weather:
        { /* As per the Open Weather Map API response for Philadelphia */ }\n}\n```\n\nInclude
        an `at` property in the same format indicating the actual time of the snapshot.\n\nIf
        no suitable data is available a 404 status code should be given.\n\n\n###
        Token \nAdd HTTP header with Authorization \n```go\n\n  // example:\n\theaders
        := map[string]string{\n\t\t\"Authorization\": \"Bearer secret_token_static\",\n\t},\n```\n\n###
        Response Code\n| HTTP | Description                            |\n|------|----------------------------------------|\n|
        200  | Fetch and store to database is success |\n| 401  | Bad Authorization.
        Check token         |\n| 404  | Data Not Found                         |\n"
      parameters:
      - description: Bearer secret_token_static
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'ex: 2019-09-01T10:00:00Z'
        in: query
        name: at
        required: true
        type: string
      - description: 'ex: 3005'
        in: path
        name: kioskId
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Snapshot of all stations at a specified time
      tags:
      - API
swagger: "2.0"
